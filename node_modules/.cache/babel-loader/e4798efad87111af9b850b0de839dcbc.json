{"ast":null,"code":"import prefixProperty from './utils/prefixProperty';\nimport prefixValue from './utils/prefixValue';\nimport addNewValuesOnly from './utils/addNewValuesOnly';\nimport isObject from './utils/isObject';\nexport default function createPrefixer(_ref) {\n  var prefixMap = _ref.prefixMap,\n      plugins = _ref.plugins;\n  return function prefix(style) {\n    for (var property in style) {\n      var value = style[property]; // handle nested objects\n\n      if (isObject(value)) {\n        style[property] = prefix(value); // handle array values\n      } else if (Array.isArray(value)) {\n        var combinedValue = [];\n\n        for (var i = 0, len = value.length; i < len; ++i) {\n          var processedValue = prefixValue(plugins, property, value[i], style, prefixMap);\n          addNewValuesOnly(combinedValue, processedValue || value[i]);\n        } // only modify the value if it was touched\n        // by any plugin to prevent unnecessary mutations\n\n\n        if (combinedValue.length > 0) {\n          style[property] = combinedValue;\n        }\n      } else {\n        var _processedValue = prefixValue(plugins, property, value, style, prefixMap); // only modify the value if it was touched\n        // by any plugin to prevent unnecessary mutations\n\n\n        if (_processedValue) {\n          style[property] = _processedValue;\n        }\n\n        style = prefixProperty(prefixMap, property, style);\n      }\n    }\n\n    return style;\n  };\n}","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/Portfolio/node_modules/styletron-engine-atomic/node_modules/inline-style-prefixer/es/createPrefixer.js"],"names":["prefixProperty","prefixValue","addNewValuesOnly","isObject","createPrefixer","_ref","prefixMap","plugins","prefix","style","property","value","Array","isArray","combinedValue","i","len","length","processedValue","_processedValue"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,wBAA3B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AAEA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC3C,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAGA,SAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAC5B,SAAK,IAAIC,QAAT,IAAqBD,KAArB,EAA4B;AAC1B,UAAIE,KAAK,GAAGF,KAAK,CAACC,QAAD,CAAjB,CAD0B,CAG1B;;AACA,UAAIP,QAAQ,CAACQ,KAAD,CAAZ,EAAqB;AACnBF,QAAAA,KAAK,CAACC,QAAD,CAAL,GAAkBF,MAAM,CAACG,KAAD,CAAxB,CADmB,CAEnB;AACD,OAHD,MAGO,IAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AAC/B,YAAIG,aAAa,GAAG,EAApB;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,KAAK,CAACM,MAA5B,EAAoCF,CAAC,GAAGC,GAAxC,EAA6C,EAAED,CAA/C,EAAkD;AAChD,cAAIG,cAAc,GAAGjB,WAAW,CAACM,OAAD,EAAUG,QAAV,EAAoBC,KAAK,CAACI,CAAD,CAAzB,EAA8BN,KAA9B,EAAqCH,SAArC,CAAhC;AACAJ,UAAAA,gBAAgB,CAACY,aAAD,EAAgBI,cAAc,IAAIP,KAAK,CAACI,CAAD,CAAvC,CAAhB;AACD,SAN8B,CAQ/B;AACA;;;AACA,YAAID,aAAa,CAACG,MAAd,GAAuB,CAA3B,EAA8B;AAC5BR,UAAAA,KAAK,CAACC,QAAD,CAAL,GAAkBI,aAAlB;AACD;AACF,OAbM,MAaA;AACL,YAAIK,eAAe,GAAGlB,WAAW,CAACM,OAAD,EAAUG,QAAV,EAAoBC,KAApB,EAA2BF,KAA3B,EAAkCH,SAAlC,CAAjC,CADK,CAGL;AACA;;;AACA,YAAIa,eAAJ,EAAqB;AACnBV,UAAAA,KAAK,CAACC,QAAD,CAAL,GAAkBS,eAAlB;AACD;;AAEDV,QAAAA,KAAK,GAAGT,cAAc,CAACM,SAAD,EAAYI,QAAZ,EAAsBD,KAAtB,CAAtB;AACD;AACF;;AAED,WAAOA,KAAP;AACD,GAnCD;AAoCD","sourcesContent":["import prefixProperty from './utils/prefixProperty';\nimport prefixValue from './utils/prefixValue';\n\nimport addNewValuesOnly from './utils/addNewValuesOnly';\nimport isObject from './utils/isObject';\n\nexport default function createPrefixer(_ref) {\n  var prefixMap = _ref.prefixMap,\n      plugins = _ref.plugins;\n\n  return function prefix(style) {\n    for (var property in style) {\n      var value = style[property];\n\n      // handle nested objects\n      if (isObject(value)) {\n        style[property] = prefix(value);\n        // handle array values\n      } else if (Array.isArray(value)) {\n        var combinedValue = [];\n\n        for (var i = 0, len = value.length; i < len; ++i) {\n          var processedValue = prefixValue(plugins, property, value[i], style, prefixMap);\n          addNewValuesOnly(combinedValue, processedValue || value[i]);\n        }\n\n        // only modify the value if it was touched\n        // by any plugin to prevent unnecessary mutations\n        if (combinedValue.length > 0) {\n          style[property] = combinedValue;\n        }\n      } else {\n        var _processedValue = prefixValue(plugins, property, value, style, prefixMap);\n\n        // only modify the value if it was touched\n        // by any plugin to prevent unnecessary mutations\n        if (_processedValue) {\n          style[property] = _processedValue;\n        }\n\n        style = prefixProperty(prefixMap, property, style);\n      }\n    }\n\n    return style;\n  };\n}"]},"metadata":{},"sourceType":"module"}