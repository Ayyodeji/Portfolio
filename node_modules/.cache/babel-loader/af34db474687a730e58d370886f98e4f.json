{"ast":null,"code":"/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n// based on:\n// - https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/focusVisible.js\n// - https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nvar initialized = false;\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n} //$FlowFixMe\n\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n} //$FlowFixMe\n\nexport function isFocusVisible(event) {\n  try {\n    return event.target.matches(':focus-visible');\n  } catch (error) {// browsers not implementing :focus-visible will throw a SyntaxError\n    // we use our own heuristic for those browsers\n    // rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  } // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(event.target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\nexport function handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n\n  if (typeof document !== 'undefined') {\n    window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n    hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n      hadFocusVisibleRecently = false;\n    }, 100);\n  }\n} //$FlowFixMe\n\nexport function initFocusVisible(node) {\n  if (!initialized && node != null) {\n    initialized = true;\n    prepare(node.ownerDocument);\n  }\n}\nexport var forkFocus = function forkFocus(rootProps, handler) {\n  return function (e) {\n    if (typeof rootProps.onFocus === 'function') {\n      rootProps.onFocus(e);\n    }\n\n    handler(e);\n  };\n};\nexport var forkBlur = function forkBlur(rootProps, handler) {\n  return function (e) {\n    if (typeof rootProps.onBlur === 'function') {\n      rootProps.onBlur(e);\n    }\n\n    handler(e);\n  };\n};","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/Portfolio/node_modules/baseui/esm/utils/focusVisible.js"],"names":["initialized","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","focusTriggersKeyboardModality","node","type","tagName","readOnly","isContentEditable","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","visibilityState","prepare","doc","addEventListener","teardown","removeEventListener","isFocusVisible","target","matches","error","handleBlurVisible","document","window","clearTimeout","setTimeout","initFocusVisible","ownerDocument","forkFocus","rootProps","handler","e","onFocus","forkBlur","onBlur"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n// based on:\n// - https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/focusVisible.js\n// - https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nvar initialized = false;\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n} //$FlowFixMe\n\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n} //$FlowFixMe\n\nexport function isFocusVisible(event) {\n  try {\n    return event.target.matches(':focus-visible');\n  } catch (error) {// browsers not implementing :focus-visible will throw a SyntaxError\n    // we use our own heuristic for those browsers\n    // rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  } // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(event.target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\nexport function handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n\n  if (typeof document !== 'undefined') {\n    window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n    hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n      hadFocusVisibleRecently = false;\n    }, 100);\n  }\n} //$FlowFixMe\n\nexport function initFocusVisible(node) {\n  if (!initialized && node != null) {\n    initialized = true;\n    prepare(node.ownerDocument);\n  }\n}\nexport var forkFocus = function forkFocus(rootProps, handler) {\n  return function (e) {\n    if (typeof rootProps.onFocus === 'function') {\n      rootProps.onFocus(e);\n    }\n\n    handler(e);\n  };\n};\nexport var forkBlur = function forkBlur(rootProps, handler) {\n  return function (e) {\n    if (typeof rootProps.onBlur === 'function') {\n      rootProps.onBlur(e);\n    }\n\n    handler(e);\n  };\n};"]},"metadata":{},"sourceType":"module"}